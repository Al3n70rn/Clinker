/*===========================================================

	C L I N K E R  P I P E L I N E

	Author: Breon Schmidt
	Version: 1.1

===========================================================*/

/*===========================================================

	P I P E L I N E   V A R I A B L E S

===========================================================*/

/*===========================================================
	Get user defined variables or define defaults
===========================================================*/

/*-- Define where all the results will live, i.e. /path/to/results/ --*/

if(binding.variables.containsKey("out")){
	fst_output_folder = out
} else {
	// Create results folder in current location
	fst_output_folder = "./results"
	new File($fst_output_folder).mkdirs()
}

/*-- Only make FST from supplied fusions. Fusion caller not required. --*/

if(binding.variables.containsKey("caller")){

	fusion_finder = false // if true, use fusions listed in fusion caller
	fusion_finder_output = caller // Location of fusion finders output file

	/*--If a fusion caller is specified, caller output information must be defined--*/
	if(binding.variables.containsKey("col")){
		column_positions = col // Location of chromosome 1, break point 1, chromosome 2, breakpoint 2, columns in above file
	} else {
		column_positions = "1,2,3,4"
	}

	/*--Specify delimiter of file, default command--*/
	if(binding.variables.containsKey("del")){
		delimiter = del // is the above file tab or comma delimited (t or c, c if ommited)
	} else {
		delimiter = "c" // is the above file tab or comma delimited (t or c, c if ommited)
	}

	/*--Specify genome of file, default 19... because for some reason people use that more--*/
	if(binding.variables.containsKey("genome")){
		genome = genome
	} else {
		genome = "19"
	}

} else {
	fusion_finder = true // if false, gene names listed via the "fusion" variable below
}

if(binding.variables.containsKey("print")){

	if(print){

		// Fusion specific parameters
		find_fusion = true

		if(binding.variables.containsKey("fusions")){
			fusion = [fusions] //if true above, identify a list of fusions of interest. Must be in order of fusion and seperated with a colon (:)
		} else {
			print "Please insert a comma delimited list of fusions"
			System.exit(0)
		}

		// PDF specific parameters

		if(binding.variables.containsKey("pdf_width")){
			pdf_width = pdf_width
		} else {
			pdf_width = "9"
		}

		if(binding.variables.containsKey("pdf_height")){
			pdf_height = pdf_height
		} else {
			pdf_height = "16"
		}

		// Adjusts the relative track sizes in the final PDF
		// Order: axis, coverage, genes, domains, transcripts, splice junctions

		if(binding.variables.containsKey("sizing")){
			proportion = sizing
		} else {
			proportion = "1,3,1,2,4,2"
		}

	} else {
		find_fusion = false
	}
}

if(binding.variables.containsKey("competitive")){
	competitive = true
} else {
	competitive = false
}

/*===========================================================
	Setup pipeline parameters
===========================================================*/

fst_program = "/usr/local/installed/clinker/1.1/python-2.7" // location of this program, i.e. /path/to/program/, default is level up from this script
resources = "/usr/local/installed/clinker/1.1/python-2.7/resources"
threads = "4" // How many threads should the aligner use

/*===========================================================
	Setup pipeline paths
===========================================================*/

annotation_folder = fst_output_folder+"/annotation"
alignment_folder = fst_output_folder+"/alignment"
genome_folder = fst_output_folder+"/genome"
reference_folder = fst_output_folder+"/reference"

/*=======================================================

	P I P E L I N E   S T A G E S

=======================================================*/

/*--Generate fused annotation and fst reference fasta files--*/

generate_fst = {
	produce("$fst_output_folder/reference/fst_reference.fasta") {
		if(fusion_finder){
			exec "python $fst_program/fusion/main.py -in $fusion_finder_output -out $fst_output_folder -pos $column_positions -del $delimiter -genome $genome -competitive $competitive -fusionlist $fusion -st $resources"
		} else {
			exec "python $fst_program/fusion/main.py -in $fusion_finder_output -out $fst_output_folder -pos $column_positions -del $delimiter -genome $genome -competitive $competitive -st $resources"
		}
	}
}

star_genome_gen = {
    //Generate STAR genome index
    doc "Generate STAR genome index"

    produce("$genome_folder/Genome") {
	    exec """STAR --runMode genomeGenerate
				--runThreadN $threads
				--genomeDir $genome_folder
				--genomeFastaFiles $reference_folder/fst_reference.fasta
				--limitGenomeGenerateRAM 36000000000
				--genomeSAindexNbases 5""","stargen"
    }
}

star_align = {

	doc "Map paired-end reads using the STAR aligner: 1st pass"

  //Map paired-end reads using the STAR aligner: 1st pass
	from("*.fastq.gz") {
		transform("(.*)_R1.fastq.gz","(.*)_R2.fastq.gz") to ("Aligned.sortedByCoord.out.bam") {

			String R1 = inputs[0];
			String R2 = inputs[1];
			String files = R1+" "+R2;

			String file_name = R1.split("/")[-1]
			String folder_name = file_name.split("_R1")[0]
			new File("$alignment_folder/$folder_name").mkdirs()
			output.dir = "$alignment_folder/$folder_name/"

			exec """STAR --genomeDir $genome_folder
				--readFilesIn ${files}
				--readFilesCommand zcat
				--outSAMtype BAM SortedByCoordinate
				--runThreadN $threads
				--outFileNamePrefix "$output.dir/"
				--limitBAMsortRAM 20000000000
			""","star1pass"
	    }
	}
}

/*--Prep normalise--*/

normalise = {

	from("*.fastq.gz") {
		transform("(.*)_R1.fastq.gz","(.*)_R2.fastq.gz") to ("coverage_rpm.bedgraph") {

			String R1 = inputs[0];
			String file_name = R1.split("/")[-1]
			String folder_name = file_name.split("_R1")[0]
			output.dir = "$alignment_folder/$folder_name"

			exec "samtools index $output.dir/Aligned.sortedByCoord.out.bam"
			exec "echo 'Normalising Coverage ($output.dir/coverage_rpm.bedgraph)'"
			exec "bamCoverage -b $output.dir/Aligned.sortedByCoord.out.bam --normalizeUsingRPKM -of bedgraph --binSize 1 -o $output.dir/coverage_rpm.bedgraph -p $threads"
			exec "echo Normalisation Complete"

		}
  	}
}


/*--Prep fusion files--*/

prepare_plot = {

	for(fusion_name in fusion){

		fusion_friendly = fusion_name.replaceAll(":", "_") //allows for windows compatiability

		from("*.fastq.gz") {
			transform("(.*)_R1.fastq.gz","(.*)_R2.fastq.gz") {

				String R1 = inputs[0];
				String file_name = R1.split("/")[-1]
				String folder_name = file_name.split("_R1")[0]
				output.dir = "$alignment_folder/$folder_name/$fusion_friendly"
				String new_alignment = "$alignment_folder/$folder_name"

				exec "$fst_program/plotit/fst_plot_prep.sh $fusion_name $output.dir $fusion_friendly $annotation_folder $new_alignment $reference_folder $fst_program/plotit"

			}

	  	}
	}
}

/*--Plot fusion--*/

plot_fusion = {

	for(fusion_name in fusion){

		fusion_friendly = fusion_name.replaceAll(":", "_") //allows for windows compatiability
m/
		from("*.fastq.gz") {
			transform("(.*)_R1.fastq.gz","(.*)_R2.fastq.gz") to ("${fusion_friendly}.pdf") {

				String R1 = inputs[0];
				String file_name = R1.split("/")[-1]
				String folder_name = file_name.split("_R1")[0]
				String friendly_folder = "$alignment_folder/$folder_name/$fusion_friendly"
				String new_alignment = "$alignment_folder/$folder_name"

				String plot_path = fst_output_folder + "/plots/" + folder_name
				def plot_folder = new File(plot_path)

				if( !plot_folder.exists() ) {
					plot_folder.mkdirs()
				}

				output.dir = plot_path

				exec "Rscript $fst_program/plotit/fst_plot.r $fst_output_folder $fusion_name $friendly_folder $pdf_height $pdf_width $proportion $new_alignment $folder_name"

			}
		}
	}
}

/*--Run bpipe, run--*/

if(find_fusion){
	Bpipe.run {
		generate_fst + star_genome_gen + "%_*.fastq.gz"*[star_align + normalise + prepare_plot + plot_fusion]
	}
} else {
	Bpipe.run {
		generate_fst + star_genome_gen + "%_*.fastq.gz"*[star_align]
	}
}
